程序员修炼之路(十)程序员必读经典书籍和成长路线
启蒙入门 

　　1、 学习一门脚本语言，例如Python/Ruby 
　　 
　　可以让你摆脱对底层语言的恐惧感，脚本语言可以让你很快开发出能用得上的小程序。实践项目: 
　　 
　　处理文本文件，或者csv (关键词 python csv, python open, python sys) 读一个本地文件，逐行处理（例如 word count，或者处理log） 
　　遍历本地文件系统 (sys, os, path)，例如写一个程序统计一个目录下所有文件大小并按各种条件排序并保存结果 
　　跟数据库打交道 (python sqlite)，写一个小脚本统计数据库里条目数量 
　　学会用各种print之类简单粗暴的方式进行调试 
　　学会用Google (phrase, domain, use reader to follow tech blogs) 
　　为什么要学脚本语言，因为他们实在是太方便了，很多时候我们需要写点小工具或是脚本来帮我们解决问题，你就会发现正规的编程语言太难用了。 
　　 
　　2、 用熟一种程序员的编辑器(不是IDE) 和一些基本工具 
　　 
　　Vim / Emacs / Notepad++，学会如何配置代码补全，外观，外部命令等。 
　　Source Insight (或 ctag) 
　　使用这些东西不是为了Cool，而是这些编辑器在查看、修改代码/配置文章/日志会更快更有效率。 
　　 
　　3、 熟悉Unix/Linux Shell和常见的命令行 
　　 
　　如果你用windows，至少学会用虚拟机里的linux， vmware player是免费的，装个Ubuntu吧 
　　一定要少用少用图形界面。 
　　学会使用man来查看帮助 
　　文件系统结构和基本操作 ls/chmod/chown/rm/find/ln/cat/mount/mkdir/tar/gzip … 
　　学会使用一些文本操作命令 sed/awk/grep/tail/less/more … 
　　学会使用一些管理命令 ps/top/lsof/netstat/kill/tcpdump/iptables/dd… 
　　了解/etc目录下的各种配置文章，学会查看/var/log下的系统日志，以及/proc下的系统运行信息 
　　了解正则表达式，使用正则表达式来查找文件。 
　　对于程序员来说Unix/Linux比Windows简单多了。（参看我四年前CSDN的博文《其实Unix很简单》）学会使用Unix/Linux你会发现图形界面在某些时候实在是太难用了，相当地相当地降低工作效率。 
　　 
　　4、 学习Web基础（HTML/CSS/JS) + 服务器端技术 (LAMP) 
　　 
　　未来必然是Web的世界，学习WEB基础的最佳网站是W3School。 
　　 
　　学习HTML基本语法 
　　学习CSS如何选中HTML元素并应用一些基本样式（关键词：box model） 
　　学会用 Firefox + Firebug 或 chrome 查看你觉得很炫的网页结构，并动态修改。 
　　学习使用Javascript操纵HTML元件。理解DOM和动态网页（http://oreilly.com/catalog/9780596527402) 网上有免费的章节，足够用了。或参看 DOM 。 
　　学会用 Firefox + Firebug 或 chrome 调试Javascript代码（设置断点，查看变量，性能，控制台等） 
　　在一台机器上配置Apache 或 Nginx 
　　学习PHP，让后台PHP和前台HTML进行数据交互，对服务器相应浏览器请求形成初步认识。实现一个表单提交和反显的功能。 
　　把PHP连接本地或者远程数据库 MySQL（MySQL 和 SQL现学现用够了） 
　　跟完一个名校的网络编程课程（例如：http://www.stanford.edu/~ouster/cgi-bin/cs142-fall10/index.php ) 不要觉得需要多于一学期时间，大学生是全职一学期选3-5门课，你业余时间一定可以跟上 
　　学习一个javascript库（例如jQuery 或 ExtJS）+ Ajax (异步读入一个服务器端图片或者数据库内容）+JSON数据格式。 
　　HTTP: The Definite Guide 读完前4章你就明白你每天上网用浏览器的时候发生的事情了(proxy, gateway, browsers) 
　　做个小网站（例如：一个小的留言板，支持用户登录，Cookie/Session，增、删、改、查，上传图片附件，分页显示） 

　　买个域名，租个空间，做个自己的网站。 


　　进阶加深 

　　1、 C语言和操作系统调用 
　　 
　　重新学C语言，理解指针和内存模型，用C语言实现一下各种经典的算法和数据结构。推荐《计算机程序设计艺术》、《算法导论》和《编程珠玑》。 
　　学习（麻省理工免费课程）计算机科学和编程导论 
　　学习（麻省理工免费课程）C语言内存管理 
　　学习Unix/Linux系统调用（Unix高级环境编程），，了解系统层面的东西。 
　　用这些系统知识操作一下文件系统，用户（实现一个可以拷贝目录树的小程序） 
　　用fork/wait/waitpid写一个多进程的程序，用pthread写一个多线程带同步或互斥的程序。多进程多进程购票的程序。 
　　用signal/kill/raise/alarm/pause/sigprocmask实现一个多进程间的信号量通信的程序。 
　　学会使用gcc和gdb来编程和调试程序（参看我的《用gdb调试程序》） 
　　学会使用makefile来编译程序。（参看我的《跟我一起写makefile》） 
　　IPC和Socket的东西可以放到高级中来实践。 
　　学习Windows SDK编程（Windows 程序设计 ，MFC程序设计） 
　　写一个窗口，了解WinMain/WinProcedure，以及Windows的消息机制。 
　　写一些程序来操作Windows SDK中的资源文件或是各种图形控件，以及作图的编程。 
　　学习如何使用MSDN查看相关的SDK函数，各种WM_消息以及一些例程。 
　　这本书中有很多例程，在实践中请不要照抄，试着自己写一个自己的例程。 
　　不用太多于精通这些东西，因为GUI正在被Web取代，主要是了解一下Windows 图形界面的编程。@virushuo 说：“ 我觉得GUI确实不那么热门了，但充分理解GUI工作原理是很重要的。包括移动设备开发，如果没有基础知识仍然很吃力。或者说移动设备开发必须理解GUI工作，或者在win那边学，或者在mac/iOS上学”。 
　　2、学习Java 
　　 
　　Java 的学习主要是看经典的Core Java 《Java 核心技术编程》和《Java编程思想》（有两卷，我仅链了第一卷，足够了，因为Java的图形界面了解就可以了） 
　　学习JDK，学会查阅Java API Doc http://download.oracle.com/javase/6/docs/api/ 
　　了解一下Java这种虚拟机语言和C和Python语言在编译和执行上的差别。从C、Java、Python思考一下“跨平台”这种技术。 
　　学会使用IDE Eclipse，使用Eclipse 编译，调试和开发Java程序。 
　　建一个Tomcat的网站，尝试一下JSP/Servlet/JDBC/MySQL的Web开发。把前面所说的那个PHP的小项目试着用JSP和Servlet实现一下。 
　　3、Web的安全与架构 
　　学习HTML5，网上有很多很多教程，以前酷壳也介绍过很多，我在这里就不罗列了。 
　　学习Web开发的安全问题（参考新浪微博被攻击的这个事，以及Ruby的这篇文章） 
　　学习HTTP Server的rewrite机制，Nginx的反向代理机制，fast-cgi（如：PHP-FPM） 
　　学习Web的静态页面缓存技术。 
　　学习Web的异步工作流处理，数据Cache，数据分区，负载均衡，水平扩展的构架。 
　　实践任务： 
　　使用HTML5的canvas 制作一些Web动画。 
　　尝试在前面开发过的那个Web应用中进行SQL注入，JS注入，以及XSS攻击。 
　　把前面开发过的那个Web应用改成构造在Nginx + PHP-FPM + 静态页面缓存的网站 
　　4、一些开发工具 
　　 
　　学会使用SVN或Git来管理程序版本。 
　　学会使用JUnit来对Java进行单元测试。 
　　学习C语言和Java语言的coding standard 或 coding guideline。（我N年前写过一篇关C语言非常简单的文章——《编程修养》，这样的东西你可以上网查一下，一大堆）。 

　　推荐阅读《代码大全》《重构》《代码整洁之道》 


　　高级深入 


　　1、C++ / Java 和面向对象 
　　 
　　我个人以为学好C++，Java也就是举手之劳。但是C++的学习曲线相当的陡。不过，我觉得C++是最需要学好的语言了。参看两篇趣文“C++学习信心图” 和“21天学好C++” 
　　 
　　学习（麻省理工免费课程）C++面向对象编程 
　　读我的 “如何学好C++”中所推荐的那些书至少两遍以上（如果你对C++的理解能够深入到像我所写的《C++虚函数表解析》或是《C++对象内存存局（上）（下）》，或是《C/C++返回内部静态成员的陷阱》那就非常不错了） 
　　然后反思为什么C++要干成这样，Java则不是？你一定要学会对比C++和Java的不同。比如，Java中的初始化，垃圾回收，接口，异常，虚函数，等等。 
　　实践任务： 
　　用C++实现一个BigInt，支持128位的整形的加减乘除的操作。 
　　用C++封装一个数据结构的容量，比如hash table。 
　　用C++封装并实现一个智能指针（一定要使用模板）。 
　　《设计模式》必需一读，两遍以上，思考一下，这23个模式的应用场景。主要是两点：1）钟爱组合而不是继承，2）钟爱接口而不是实现。（也推荐《深入浅出设计模式》） 
　　实践任务： 
　　使用工厂模式实现一个内存池。 
　　使用策略模式制做一个类其可以把文本文件进行左对齐，右对齐和中对齐。 
　　使用命令模式实现一个命令行计算器，并支持undo和redo。 
　　使用修饰模式实现一个酒店的房间价格订价策略——旺季，服务，VIP、旅行团、等影响价格的因素。 
　　学习STL的用法和其设计概念 - 容器，算法，迭代器，函数子。如果可能，请读一下其源码。 
　　实践任务：尝试使用面向对象、STL，设计模式、和WindowsSDK图形编程的各种技能 
　　做一个贪吃蛇或是俄罗斯方块的游戏。支持不同的级别和难度。 
　　做一个文件浏览器，可以浏览目录下的文件，并可以对不同的文件有不同的操作，文本文件可以打开编辑，执行文件则执行之，mp3或avi文件可以播放，图片文件可以展示图片。 
　　学习C++的一些类库的设计，如： MFC（看看候捷老师的《深入浅出MFC》） ，Boost, ACE, CPPUnit，STL （STL可能会太难了，但是如果你能了解其中的设计模式和设计那就太好了，如果你能深入到我写的《STL string类的写时拷贝技术》那就非常不错了，ACE需要很强在的系统知识，参见后面的“加强对系统的了解”） 
　　Java是真正的面向对象的语言，Java的设计模式多得不能再多，也是用来学习面向对象的设计模式的最佳语言了（参看Java中的设计模式）。 
　　推荐阅读《Effective Java》 and 《Java解惑》 
　　学习Java的框架，Java的框架也是多，如Spring, Hibernate，Struts 等等，主要是学习Java的设计，如IoC等。 
　　Java的技术也是烂多，重点学习J2EE架构以及JMS， RMI, 等消息传递和远程调用的技术。 
　　学习使用Java做Web Service （官方教程在这里） 
　　实践任务： 尝试在Spring或Hibernate框架下构建一个有网络的Web Service的远程调用程序，并可以在两个Service中通过JMS传递消息。 
　　C++和Java都不是能在短时间内能学好的，C++玩是的深，Java玩的是广，我建议两者选一个。我个人的学习经历是： 
　　 
　　深究C++（我深究C/C++了十来年了） 
　　学习Java的各种设计模式。 
　　2、加强系统了解 
　　 
　　重要阅读下面的几本书： 
　　 
　　《Unix编程艺术》了解Unix系统领域中的设计和开发哲学、思想文化体系、原则与经验。你一定会有一种醍醐灌顶的感觉。 
　　《Unix网络编程卷1，套接字》这是一本看完你就明白网络编程的书。重要注意TCP、UDP，以及多路复用的系统调用select/poll/epoll的差别。 
　　《TCP/IP详解 卷1:协议》- 这是一本看完后你就可以当网络黑客的书。了解以太网的的运作原理，了解TCP/IP的协议，运作原理以及如何TCP的调优。 
　　实践任务： 
　　理解什么是阻塞（同步IO），非阻塞（异步IO），多路复用（select, poll, epoll）的IO技术。 
　　写一个网络聊天程序，有聊天服务器和多个聊天客户端（服务端用UDP对部分或所有的的聊天客户端进Multicast或Broadcast）。 
　　写一个简易的HTTP服务器。 
　　《Unix网络编程卷2，进程间通信》信号量，管道，共享内存，消息等各种IPC…… 这些技术好像有点老掉牙了，不过还是值得了解。 
　　实践任务： 
　　主要实践各种IPC进程序通信的方法。 
　　尝试写一个管道程序，父子进程通过管道交换数据。 
　　尝试写一个共享内存的程序，两个进程通过共享内存交换一个C的结构体数组。 
　　学习《Windows核心编程》一书。把CreateProcess，Windows线程、线程调度、线程同步（Event, 信号量，互斥量）、异步I/O，内存管理，DLL，这几大块搞精通。 
　　实践任务：使用CreateProcess启动一个记事本或IE，并监控该程序的运行。把前面写过的那个简易的HTTP服务用线程池实现一下。写一个DLL的钩子程序监控指定窗口的关闭事件，或是记录某个窗口的按键。 
　　有了多线程、多进程通信，TCP/IP，套接字，C++和设计模式的基本，你可以研究一下ACE了。使用ACE重写上述的聊天程序和HTTP服务器（带线程池） 
　　实践任务：通过以上的所有知识，尝试 
　　写一个服务端给客户端传大文件，要求把100M的带宽用到80%以上。（注意，磁盘I/O和网络I/O可能会很有问题，想一想怎么解决，另外，请注意网络传输最大单元MTU） 
　　了解BT下载的工作原理，用多进程的方式模拟BT下载的原理。 
　　3、系统架构 
　　 
　　负载均衡。HASH式的，纯动态式的。（可以到Google学术里搜一些关于负载均衡的文章读读） 
　　多层分布式系统 – 客户端服务结点层、计算结点层、数据cache层，数据层。J2EE是经典的多层结构。 
　　CDN系统 – 就近访问，内容边缘化。 
　　P2P式系统，研究一下BT和电驴的算法。比如：DHT算法。 
　　服务器备份，双机备份系统（Live-Standby和Live-Live系统），两台机器如何通过心跳监测对方？集群主结点备份。 
　　虚拟化技术，使用这个技术，可以把操作系统当应用程序一下切换或重新配置和部署。 
　　学习Thrift，二进制的高性能的通讯中间件，支持数据(对象)序列化和多种类型的RPC服务。 
　　学习Hadoop。Hadoop框架中最核心的设计就是：MapReduce和HDFS。MapReduce的思想是由Google的一篇论文所提及而被广为流传的，简单的一句话解释MapReduce就是“任务的分解与结果的汇总”。HDFS是Hadoop分布式文件系统（Hadoop Distributed File System）的缩写，为分布式计算存储提供了底层支持。 
　　了解NoSQL数据库（有人说可能是一个过渡炒作的技术），不过因为超大规模以及高并发的纯动态型网站日渐成为主流，而SNS类网站在数据存取过程中有着实时性等刚性需求，这使得目前NoSQL数据库慢慢成了人们所关注的焦点，并大有成为取代关系型数据库而成为未来主流数据存储模式的趋势。当前NoSQL数据库很多，大部分都是开源的，其中比较知名的有：MemcacheDB、Redis、Tokyo Cabinet(升级版为Kyoto Cabinet)、Flare、MongoDB、CouchDB、Cassandra、Voldemort等。 

　　写了那么多，回顾一下，觉得自己相当的有成就感。希望大家不要吓着，我自己这十来年也在不断地学习，今天我也在学习中，人生本来就是一个不断学习和练级的过程。不过，一定有漏的，也有不对的，还希望大家补充和更正。（我会根据大家的反馈随时更新此文）欢迎大家通过我的微博（@左耳朵耗子）和twitter（@haoel）和我交流。


程序员修炼之路（一）--随便写写，养成写技术博客的习惯
程序员修炼之路（二）--近期的学习计划
程序员修炼之路（三）一个清华大学毕业生做猎头的感受（转）
程序员修炼之路（四）走近腾讯 走进腾讯（一个关于面试准备的记录）
程序员修炼之路（五）李开复：算法的力量|万变不离其宗
程序员修炼之路（六）编写自己的工具（JAVA注册系统级快捷键源码>jintellitype<）
程序员修炼之路（七）这十几年编程的不同认知层次——摘自聊天记录
程序员修炼之路（八）再次写给我们这些浮躁的程序员
程序员修炼之路（九）关于为什么中国这么多码农的其中一种解释


始终认为，对一个初学者来说，IT界的技术风潮是不可追赶。 我时常看见自己的DDMM们把课本扔了，去买些价格不菲的诸如C#, VB.Net 这样的大部头，这让我感到非常痛心。 而许多搞不清指针是咋回事的BBS站友眉飞色舞的讨论C#里面可以不用指针等等则让我觉得好笑。
C#就象当年的ASP 一样，“忽如一夜春风来，千树万树梨花开”，结果许多学校的信息学院成了“Web 学院”。 96, 97级的不少大学生都去做Web了。当然我没有任何歧视某一行业的意识。 我只是觉得如果他们把追赶这些时髦技术的时间多花一点在基础的课程上应该是可以走得更远的。
几个误区
初学者对C#风潮的追赶其实也只是学习过程中经常遇到的几个误区之一。 我将用一些实际的例子来说明这些现象，你可以按部就班的看看自己是不是属于其中的一种或者几种：
认为计算机技术等于编程技术：
有些人即使没有这个想法，在潜意识中也有这样的冲动。 让我奇怪的是，许多信息学院的学生也有这样的念头。 认为计算机专业就是编程专业，与编程无关的，或者不太相关课程他统统都不管，极端的学生只要书上没带“编程”两个字他就不看。
其实编程只是计算机技术应用过程中一种复杂性最低的劳动，这就是为什么IT业最底层的人是程序员（CODER）。 计算机技术包括了多媒体，计算机网络，人工智能，模式识别，管理信息系统等等这些方面。 编程工作只是在这些具体技术在理论研究或者工程实践的过程中表达算法的过程。
编程的人不一定对计算机技术的了解就一定很高。而一个有趣的现象是，不少大师级的计算机技术研究者是不懂编程的。 网上的炒作和现实中良好的工作待遇把编程这种劳动神秘化了。 其实每一个程序员心里都明白，自己这些东西，学的时候并不比其它专业难，所以自然也不会高档到哪里去。
咬文嚼字的孔已己作风：
我见过一本女生的《计算机网络原理》教材，这个女生像小学生一样在书上划满了横杠杠，笔记做得满满的，打印出来一定比教材还厚。 我不明白的是，像计算机网络原理这样的课程有必要做笔记？ 我们的应试教育的确害了不少学生，在上《原理》这一类课程的时候许多学生像学《马列原理》一样逐字背诵记忆。 这乃是我见过的最愚蠢的行为。 所谓《原理》，即是需要掌握它为什么这样做，学习why，而不是how（怎样做）。 极端认真的学生背下以太网的网线最大长度，数据帧的长度，每个字段的意义，IP报头的格式等等，但是忘了路由的原则，忘了TCP/IP协议设计的宗旨。 总之许多人花了大量的时间把书背得滚瓜烂熟却等于什么也没学。
在学习编程的时候这些学生也是这样，他们确切的记得C++语法的各个细节。 看完了C++ 教程后看《Thinking in C++》（确实是好书），《Inside C++》，《C++ reference》，this C++, that C++……， 然后是网上各种各样的关于C++语法的奇闻逸事，然后发现自己又忘了C++的一些语法，最后回头继续恶补…。
有个师弟就跟我说：“C++太难了，学了这里忘了那里，学了继承忘了模板。”
我的回答道：“你不去学就容易了”。
我并没有教坏他，只是告诉他，死抠C++的语法就和孔已己炫耀茴香豆的茴字有几种写法一样毫无意义。 你根本不需要对的C++语法太关心，动手编程就是了，有不记得的地方一查MSDN就立马搞定。 我有个结论就是，实际的开发过程中对程序语法的了解是最微不足道的知识。 这是为什么我在为同学用Basic（我以前从没有学过它）写一个小程序的时候，只花了半个小时看了看语法，然后再用半个小时完成了程序， 而一个小时后我又完全忘记了Basic 的所有关键字。
不顾基础，盲目追赶时髦技术：
终于点到题目上来了。 大多数的人都希望自己的东西能够马上跑起来，变成钱。 这种想法对一个已经进入职业领域的程序员或者项目经理来说是合理的，而且IT技术进步是如此的快，不跟进就是失业。 但是对于初学者来说（尤其是时间充裕的大中专在校生），这种想法是另人费解的。
一个并未进入到行业竞争中来的初学者最大的资本便是他有足够的时间沉下心来学习基础性的东西，学习why而不是how。 时髦的技术往往容易掌握，而且越来越容易掌握，这是商业利益的驱使，为了最大化的降低软件开发的成本。 但在IT领域内的现实就是这样，越容易掌握的东西，学习的人越多，而且淘汰得越快。 每一次新的技术出来，都有许多初学者跟进，这些初学者由于缺乏必要的基础而使得自己在跟进的过程中花费大量的时间，而等他学会了，这种技术也快淘汰了。
基础的课程，比方数据结构，操作系统原理等等虽然不能让你立马就实现一个Linux（这是许多人嘲笑理论课程无用的原因）， 但它们能够显著的减少你在学习新技术时学习曲线的坡度。 而且对于许多关键的技术（比方Win32 SDK 程序的设计，DDK的编程）来说甚至是不可或缺的。
一个活生生的例子是我和我的一个同学，在大一时我还找不到开机按纽，他已经会写些简单的汇编程序了。 我把大二的所有时间花在了汇编，计算机体系结构，数据结构，操作系统原理等等这些课程的学习上，而他则开始学习HTML和VB，并追赶ASP的潮流。 大三的时候我开始学习Windows 操作系统原理，学习SDK编程，时间是漫长的，这时我才能够用VC开发出象模象样的应用程序。 我曾一度因为同学的程序已经能够运行而自己还在学习如何创建对话框而懊恼不已，但临到毕业才发现自己的选择是何等的正确。 和我谈判的公司开出的薪水是他的两倍还多。
下面有一个不很恰当的比方：假设学习VB编程需要 4个月，学习基础课程和VC的程序设计需要1年。 那么如果你先学VB，再来学习后者，时间不会减少，还是1年，而反过来，如果先学习后者，再来学VB，也许你只需要1个星期就能学得非常熟练。
几个重要的基础课程
如果你是学生，或者如果你有充足的时间。我建议你仔细的掌握下面的知识。 我的建议是针对那些希望在IT技术上有所成就的初学者。 同时我还列出了一些书目，这些书应该都还可以在书店买到。 说实在的，我在读其他人的文章时最大的心愿就是希望作者列出一个书单。
大学英语 －不要觉得好笑。我极力推荐这门课程是因为没有专业文档的阅读能力是不可想象的。 中文的翻译往往在猴年马月才会出来，而现在的许多出版社干脆就直接把E文印刷上去。 学习的方法是强迫自己看原版的教材，开始会看不懂，用多了自然熟练。 吃得苦下得狠心绝对是任何行业都需要的品质。
计算机体系结构和汇编语言 －关于体系结构的书遍地都是，而且也大同小异， 倒是汇编有一本非常好的书《80x86汇编语言程序设计教程》（清华大学出版社，黑色封面，杨季文著）。 你需要着重学习386后保护模式的程序设计。否则你在学习现代操作系统底层的一些东西的时候会觉得是在看天书。
计算机操作系统原理 －我们的开发总是在特定的操作系统上进行，如果不是，只有一种可能：你在自己实现一个操作系统。 无论如何，操作系统原理是必读的。这就象我们为一个芯片制作外围设备时，芯片基本的工作时序是必需了解的。 这一类书也很多，我没有发现哪一本书非常出众。 只是觉得在看完了这些书后如果有空就应该看看《Inside Windows 2000》(微软出版社，我看的是E文版的，中文的书名想必是Windows 2000 技术内幕之类吧)。 关于学习它的必要性，ZDNET上的另一篇文章已经有过论述。
数据结构和算法 －这门课程能够决定一个人程序设计水平的高低，是一门核心课程。我首选的是清华版的（朱战立，刘天时）。 很多人喜欢买C++版的，但我觉得没有必要。C++的语法让算法实现过程变得复杂多了，而且许多老师喜欢用模块这一东西让算法变得更复杂。 倒是在学完了C版的书以后再来浏览一下 C++的版的书是最好的。
软件工程 －这门课程是越到后来就越发现它的重要，虽然刚开始看时就象看马哲一样不知所云。 我的建议是看《实用软件工程》（黄色，清华）。 不要花太多的时间去记条条框框，看不懂就跳过去。 在每次自己完成了一个软件设计任务（不管是练习还是工作）以后再来回顾回顾，每次都会有收获。
Windows 程序设计 －《北京大学出版社，Petzold著》我建议任何企图设计Windows 程序的人在学习VC以前仔细的学完它。 而且前面的那本《Inside Windows 2000》也最好放到这本书的后面读。 在这本书中，没有C++，没有GUI，没有控件。有的就是如何用原始的C语言来完成Windows 程序设计。 在学完了它以后，你才会发现VC其实是很容易学的。千万不要在没有看完这本书以前提前学习VC，你最好碰都不要碰。 我知道的许多名校甚至都已经用它作为教材进行授课。可见其重要。
上面的几门课程我认为是必学的重要课程（如果你想做Windows 程序员）。
对于其它的课程有这样简单的选择方法：如果你是计算机系的，请学好你所有的专业基础课。 如果不是，请参照计算机系的课程表。 如果你发现自己看一本书时无法看下去了，请翻到书的最后，看看它的参考文献，找到它们并学习它们，再回头看这本书。 如果一本书的书名中带有“原理”两个字，你一定不要去记忆它其中的细节，你应该以一天至少50页的速度掌握其要领。 尽可能多的在计算机上实践一种理论或者算法。
日三省乎己
每天读的书太多，容易让人迷失方向。看看我以前整理的一个合格程序员应该看哪些书，如果原文被墙，可以到CSDN看。 一定要在每天晚上想想自己学了些什么，还有些什么相关的东西需要掌握，自己对什么最感兴趣，在一本书上花的时间太长还是不够等等。 同时也应该多想想未来最有可能出现的应用，这样能够让你不是追赶技术潮流而是引领技术潮流。 同时，努力使用现在已经掌握的技术和理论去制作具有一定新意的东西。 坚持这样做能够让你真正成为一个软件“研发者”而不仅仅是一个CODER。
把最多的时间花在学习上
这是对初学者最后的忠告。 把每个星期玩CS或者CS的时间压缩到最少，不玩它们是最好的。 同时，如果你的ASP技术已经能够来钱，甚至有公司请你兼职的话，这就证明你的天分能够保证你在努力的学习之后取得更好的收益，你应该去做更复杂的东西。 眼光放长远一些，这无论是对谁都是适用的。

